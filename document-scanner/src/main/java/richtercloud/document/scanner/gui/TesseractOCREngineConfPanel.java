/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import org.apache.commons.lang.StringUtils;
import richtercloud.document.scanner.gui.engineconf.OCREngineConfPanel;
import richtercloud.document.scanner.ocr.OCREngine;
import richtercloud.document.scanner.ocr.TesseractOCREngine;

/**
 *
 * @author richter
 */
public class TesseractOCREngineConfPanel extends OCREngineConfPanel {
    private static final long serialVersionUID = 1L;
    private TesseractOCREngine oCREngine;
    private String tesseract = TesseractOCREngine.TESSERACT_DEFAULT;
    private final DefaultListModel languageListModel = new DefaultListModel();
    private List<String> selectedLanguages = new LinkedList<>();
    private final static String CONF_KEY_LANGUAGES = "languages";

    /**
     * Creates new form TesseractOCREngineConfPanel
     * @throws java.io.IOException
     * @throws java.lang.InterruptedException
     */
    public TesseractOCREngineConfPanel() throws IOException, InterruptedException {
        this.initComponents();
        TesseractOCREngine.checkTesseractAvailableExceptions(this.tesseract);
        ProcessBuilder tesseractProcessBuilder = new ProcessBuilder(this.tesseract, "--list-langs");
        Process tesseractProcess = tesseractProcessBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE).start();
        int tesseractProcessReturnCode = tesseractProcess.waitFor();
        if(tesseractProcessReturnCode != 0) {
            throw new RuntimeException(String.format("the tesseract process unexpectedly returned with non-zero return code %d", tesseractProcessReturnCode));
        }
        //tesseract --list-langs prints to stderr, reported as https://bugs.launchpad.net/ubuntu/+source/tesseract/+bug/1481015
        Scanner tesseractProcessOutputScanner = new Scanner(tesseractProcess.getErrorStream());
        while(tesseractProcessOutputScanner.hasNextLine()) {
            String lang = tesseractProcessOutputScanner.nextLine();
            if(!lang.startsWith("List of available languages")) {
                this.languageListModel.addElement(lang);
            }
        }
    }
    
    public TesseractOCREngineConfPanel(String tesseract) throws IOException, InterruptedException {
        this();
        this.tesseract = tesseract;
    }
    
    /**
     * returns a {@code String} representing a language code which is guaranteed
     * to be compatible with {@code tesseract} when passed with {@code -l}
     * option
     * @return 
     */
    public List<String> getSelectedLanguages() {
        return Collections.unmodifiableList(this.selectedLanguages);
    }

    @Override
    public OCREngine getOCREngine() {
        return this.oCREngine;
    }

    @Override
    public void save(Properties conf) {
        this.selectedLanguages = this.languageList.getSelectedValuesList();
        if(this.oCREngine == null) {
            this.oCREngine = new TesseractOCREngine(this.selectedLanguages);
        }else {
            this.oCREngine.setLanguages(this.selectedLanguages);
        }
        conf.setProperty(CONF_KEY_LANGUAGES, StringUtils.join(this.selectedLanguages, ";"));
    }

    @Override
    public void load(Properties conf) {
        String languages = conf.getProperty(CONF_KEY_LANGUAGES);
        List<String> selectedLanguages = new LinkedList<>(Arrays.asList(StringUtils.split(languages, ";")));
        this.selectedLanguages = selectedLanguages;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        languageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        languageList = new javax.swing.JList();

        languageLabel.setText("Language");

        languageList.setModel(languageListModel);
        jScrollPane1.setViewportView(languageList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(languageLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(languageLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JList languageList;
    // End of variables declaration//GEN-END:variables
}
