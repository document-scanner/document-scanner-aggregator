/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui;

import java.util.Properties;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import richtercloud.document.scanner.gui.storageconf.StorageConfPanel;
import richtercloud.document.scanner.storage.DefaultPersistenceStorage;

/**
 *
 * @author richter
 */
public class DerbyPersistenceStorageConfPanel extends StorageConfPanel {
    private static final long serialVersionUID = 1L;
    private DefaultPersistenceStorage storage;
    private final static String CONF_KEY_CONNECTION_URL = "storage-derby-persistence-connection-url";
    private final static String CONF_KEY_USERNAME = "storage-derby-persistence-username";
    private final static String CONF_KEY_PASSWORD = "storage-derby-persistence-password";
    private final static String CONF_KEY_STORAGE_PARENT_DIR = "storage-derby-persistence-parent-dir";
    private final static String CONF_KEY_STORAGE_DATABASE_DIR_NAME = "storage-derby-persistence-database-dir-name";
    private EntityManagerFactory entityManagerFactory;
    private EntityManager entityManager;

    /**
     * Creates new form DerbyStorageConfPanel
     */
    private DerbyPersistenceStorageConfPanel() {
        this.initComponents();
    }
    
    public DerbyPersistenceStorageConfPanel(EntityManager entityManager, EntityManagerFactory entityManagerFactory) {
        this();
        this.storage = new DefaultPersistenceStorage(entityManager);
        this.entityManagerFactory = entityManagerFactory;
        this.entityManager = entityManager;
    }

    @Override
    public DefaultPersistenceStorage getStorage() {
        return this.storage;
    }

    @Override
    public void save(Properties conf) {
        String connectionURL = this.connectionURLTextField.getText();
        String username = this.usernameTextField.getText();
        String password = new String(this.passwordPasswordField.getPassword());
        this.storage.recreateEntityManager(this.entityManagerFactory, connectionURL, username, password);
    }

    @Override
    public void load(Properties conf) {
        String connectionURL = conf.getProperty(CONF_KEY_CONNECTION_URL);
        String username = conf.getProperty(CONF_KEY_USERNAME);
        String password = conf.getProperty(CONF_KEY_PASSWORD);
        String parentDir = conf.getProperty(CONF_KEY_STORAGE_PARENT_DIR);
        String databaseDirName = conf.getProperty(CONF_KEY_STORAGE_DATABASE_DIR_NAME);
        this.storage = new DefaultPersistenceStorage(this.entityManager);
        this.storage.recreateEntityManager(this.entityManagerFactory, connectionURL, username, password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectionURLTextField = new javax.swing.JTextField();
        connectionURLLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();

        connectionURLLabel.setText("Connection URL");

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        passwordPasswordField.setText("jPasswordField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectionURLLabel)
                    .addComponent(usernameLabel)
                    .addComponent(passwordLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTextField)
                    .addComponent(connectionURLTextField)
                    .addComponent(passwordPasswordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionURLLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionURLLabel;
    private javax.swing.JTextField connectionURLTextField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
